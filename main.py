#! /Users/tsuno/.pyenv/shims/python3
# -*- coding: utf-8 -*-
#
# generated by wxGlade 0.9.6 on Thu Oct 29 22:41:10 2020
#

import numpy, matplotlib
if matplotlib.__version__ < '2.2':
    raise ValueError("Minimum Matplotlib version required: 2.2")

#
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas

#
import matplotlib.patches as patches

#
#import aijRc
#
import punch
#import steel

import wx
import os
import csv
#import pandas as pd
import linecache
#from shutil import make_archive

# read from glade
import gui_punch

# excel format
#import openpyxl
#from openpyxl.utils import get_column_letter # 列幅の指定 2020/05/27

# pdf export
import report

#import plate
# begin wxGlade: extracode
# end wxGlade


class MyFrame2(gui_punch.MyFrame2):

    def OnClear(self,event):
        self.Clear_R()

    def Clear_R(self):
        # Check ',' include or not
        title = self.text_ctrl_title.GetValue()
        subTitle = self.text_ctrl_subtitle.GetValue()
        if ',' in title:
            dlg = wx.MessageDialog(self, 'You can\'t input "," to title tab',
                                   'Input Error',
                                   wx.OK | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()
        if ',' in subTitle:
            dlg = wx.MessageDialog(self, 'You can\'t input "," to sub title tab',
                                   'Input Error',
                                   wx.OK | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()
        #
        self.text_ctrl_b1.SetValue("")
        self.text_ctrl_b2.SetValue("")
        self.text_ctrl_b0.SetValue("")
        self.text_ctrl_d.SetValue("")
        #
        # Load
        self.text_ctrl_vu.SetValue("")
        self.text_ctrl_mu.SetValue("")
        # Prop.
        self.text_ctrl_ac.SetValue("")
        self.text_ctrl_jc.SetValue("")
        self.text_ctrl_cab.SetValue("")
        # Evaluation
        self.text_ctrl_gamma_f.SetValue("")
        self.text_ctrl_gamma_v.SetValue("")
        self.text_ctrl_mubar.SetValue("")
        self.text_ctrl_msc.SetValue("")
        # Analysis
        self.text_ctrl_vug.SetValue("")
        self.text_ctrl_vv1.SetValue("")
        self.text_ctrl_vv2.SetValue("")
        self.text_ctrl_vmax.SetValue("")
        self.text_ctrl_vmin.SetValue("")
        # Check Concrete Capacity
        self.text_ctrl_vc1.SetValue("")
        self.text_ctrl_vc2.SetValue("")
        self.text_ctrl_vc3.SetValue("")
        self.text_ctrl_vc.SetValue("")
        self.text_ctrl_pvc.SetValue("")
        # Check RF.
        self.text_ctrl_vnmax.SetValue("")
        self.text_ctrl_pvnmax.SetValue("")
        self.text_ctrl_reqvs.SetValue("")
        self.text_ctrl_reqas.SetValue("")
        #
        self.text_ctrl_concreteJudge.SetValue("")
        self.text_ctrl_judge.SetValue("")
        #


    def ListShow(self):
        self.list_ctrl_output.DeleteAllItems();
        idTotal = self.text_ctrl_idView.GetValue()
        outFile = './db/rcslab.txt'
        index = 0
        if idTotal != '0':
            with open(outFile, encoding='utf-8') as f:
                for row in csv.reader(f):
                    self.list_ctrl_output.InsertItem(index, index)
                    self.list_ctrl_output.SetItem(index, 0, str(int(index+1)))
                    self.list_ctrl_output.SetItem(index, 1, row[0])
                    self.list_ctrl_output.SetItem(index, 2, row[1])
                    index += 1
            f.close()
    # Remove Button

    def OnMove(self,event):

        # read
        idTotal = int(self.text_ctrl_idTotal.GetValue())
        id_move1 = int(self.text_ctrl_move1.GetValue())
        id_move2 = int(self.text_ctrl_move2.GetValue())
        data = []

        f = open('./db/rcslab.txt', encoding='utf-8')

        for i in range(0,idTotal):
            line = f.readline()
            data.append(line)
        f.close()

        outFile = './db/rcslab.txt'
        fout = open(outFile, "w", encoding='utf-8')

        if id_move2 < id_move1:
            for i in range(0,idTotal):
                if id_move2 == i+1:
                    fout.writelines(str(data[id_move1-1]))
                if id_move1 != i+1:
                    fout.writelines(str(data[i]))
        else:
            for i in range(0,idTotal):
                if id_move1 != i+1:
                    fout.writelines(str(data[i]))
                if id_move2 == i+1:
                    fout.writelines(str(data[id_move1-1]))

        fout.close()

        # output
        self.ListShow()

    def OnRemove(self,event):


        if self.text_ctrl_remove.GetValue() == '':
            print(self.text_ctrl_remove.GetValue())
            dlg = wx.MessageDialog(self, 'Pls, input Remove No.',
                                   'Error',
                                   wx.OK | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()

        else:
            # read
            idTotal = int(self.text_ctrl_idTotal.GetValue())
            id_remove = int(self.text_ctrl_remove.GetValue())

            data = []

            f = open('./db/rcslab.txt', encoding='utf-8')

            for i in range(0,idTotal):
                line = f.readline()
                data.append(line)
            f.close()

            outFile = './db/rcslab.txt'
            fout = open(outFile, "w", encoding='utf-8')

            for i in range(0,idTotal):
                if id_remove != i+1:
                    fout.writelines(str(data[i]))

            fout.close()

            # output
            self.text_ctrl_idTotal.SetValue( str(idTotal-1))
            self.ListShow()

    def SubShow(self,data):

        # substitute
        title = data[0]
        subTitle = data[1]
        #
        c1 = data[2]
        c2 = data[3]
        dp = data[4]
        dt = data[5]
        calType = data[6]
        phai = data[7]
        facdl = data[8]
        facll = data[9]
        vdl = data[10]
        vll = data[11]
        mdl  = data[12]
        mll  = data[13]
        fc   = data[14]
        fy = data[15]
        s = data[16]
        # from out

        b1 = data[17]
        b2 = data[18]
        b0 = data[19]
        d  = data[20]
        #
        vu = data[21]
        mu = data[22]
        ac = data[23]
        jc = data[24]
        cab  = data[25]
        #
        gamma_f = data[26]
        gamma_v   = data[27]
        msc = data[28]
        mv  = data[29]
        tau_u  = data[30]
        tau_v1 = data[31]
        tau_v2 = data[32]
        tau_max = data[33]
        tau_min = data[34]
        vc1 = data[35]
        vc2  = data[36]
        vc3 = data[37]

        vc = data[38]
        pvc = data[39]
        # Check RF.
        vnmax = data[40]
        pvnmax = data[41]
        reqvs = data[42]
        reqas = data[43]
        # Judge
        concreteJudge = data[44]
        judge = data[45]

        # Slab Condition
        #
        # Title
        self.text_ctrl_title.SetValue(title)
        self.text_ctrl_subtitle.SetValue( subTitle)
        #
        self.text_ctrl_b1.SetValue((b1))
        self.text_ctrl_b2.SetValue((b2))
        self.text_ctrl_b0.SetValue((b0))
        self.text_ctrl_d.SetValue((d))
        #
        # Column
        self.text_ctrl_c1.SetValue( c1 )
        self.text_ctrl_c2.SetValue( c2 )
        # Drop Panel
        self.text_ctrl_dp.SetValue( dp )
        self.text_ctrl_dt.SetValue( dt )
        # Design Condition
        self.combo_box_CalType.SetValue(calType)
        self.text_ctrl_phai.SetValue( phai )
        self.text_ctrl_facdl.SetValue( facdl )
        self.text_ctrl_facll.SetValue( facll )
        self.text_ctrl_vdl.SetValue( vdl   )
        self.text_ctrl_vll.SetValue( vll   )
        self.text_ctrl_mdl.SetValue( mdl   )
        self.text_ctrl_mll.SetValue( mll   )
        # Material
        self.text_ctrl_fc.SetValue( fc )
        self.text_ctrl_fy.SetValue( fy )
        self.text_ctrl_s.SetValue( s  )
        #####
        # output
        #
        # Load
        self.text_ctrl_vu.SetValue((vu))
        self.text_ctrl_mu.SetValue((mu))
        # Prop.
        self.text_ctrl_ac.SetValue((ac))
        self.text_ctrl_jc.SetValue((jc))
        self.text_ctrl_cab.SetValue((cab))
        # Evaluation
        self.text_ctrl_gamma_f.SetValue((gamma_f))
        self.text_ctrl_gamma_v.SetValue((gamma_v))
        self.text_ctrl_mubar.SetValue((msc))
        self.text_ctrl_msc.SetValue((mv))
        # Analysis
        self.text_ctrl_vug.SetValue((tau_u))
        self.text_ctrl_vv1.SetValue((tau_v1))
        self.text_ctrl_vv2.SetValue((tau_v2))
        self.text_ctrl_vmax.SetValue((tau_max))
        self.text_ctrl_vmin.SetValue((tau_min))
        # Check Concrete Capacity
        self.text_ctrl_vc1.SetValue((vc1))
        self.text_ctrl_vc2.SetValue((vc2))
        self.text_ctrl_vc3.SetValue((vc3))
        self.text_ctrl_vc.SetValue((vc))
        self.text_ctrl_pvc.SetValue((pvc))
        # Check RF.
        self.text_ctrl_vnmax.SetValue((vnmax))
        self.text_ctrl_pvnmax.SetValue((pvnmax))
        self.text_ctrl_reqvs.SetValue((reqvs))
        self.text_ctrl_reqas.SetValue((reqas))
        # Judge
        self.text_ctrl_concreteJudge.SetValue(concreteJudge)
        self.text_ctrl_judge.SetValue(judge)


    # Show Button
    ####################
    def OnShow(self,event):

        # read
        id_show = self.list_ctrl_output.GetFirstSelected() + 1
        line = linecache.getline('./db/rcslab.txt', id_show )
        data = line.split(', ')
        # test
        """
        print('Id = ' + str(id_show))
        print('line' + line)
        print(data)
        """
        # output
        idView = id_show
        self.text_ctrl_idView.SetValue(str(idView))
        self.SubShow(data)
        linecache.clearcache()
        #
        # output remove and move
        self.text_ctrl_remove.SetValue(str(idView))
        self.text_ctrl_move1.SetValue(str(idView))
        #
        #
        #self.OnChangeBound(event)
        self.OnCal(event)

    # Header Button
    def OnPre(self,event):

        # read
        id_show = int(self.text_ctrl_idView.GetValue())
        idTotal = int(self.text_ctrl_idTotal.GetValue())
        #
        if id_show == 1 :
            id_show_next = idTotal
        else:
            id_show_next = id_show - 1

        self.text_ctrl_idView.SetValue(str(id_show_next))
        line = linecache.getline('./db/rcslab.txt', id_show_next )
        data = line.split(', ')
        self.SubShow(data)
        linecache.clearcache()
        self.OnCal(event)

    def OnNext(self,event):

        # read
        id_show = int(self.text_ctrl_idView.GetValue())
        idTotal = int(self.text_ctrl_idTotal.GetValue())
        #
        if id_show >= idTotal :
            id_show_next = 1
        else:
            id_show_next = id_show + 1

        self.text_ctrl_idView.SetValue(str(id_show_next))
        line = linecache.getline('./db/rcslab.txt', id_show_next )
        data = line.split(', ')
        self.SubShow(data)
        linecache.clearcache()
        self.OnCal(event)


    def OnPlus(self,event):
        idTotal = int(self.text_ctrl_idTotal.GetValue())
        id_View = idTotal + 1
        self.text_ctrl_idView.SetValue(str(id_View))
        self.Clear_R()
        self.text_ctrl_title.SetValue('No.'+str(id_View))

    def OnQuit(self, event):
        self.Close()


    def OnStore(self,event):

        #
        idView  = self.text_ctrl_idView.GetValue()
        idTotal = self.text_ctrl_idTotal.GetValue()
        #
        ####################
        data = []
        data = self.input_parameter(0)
        #
        ####################
        outFile = './db/rcslab.txt'
        if idTotal == '0':
            fout = open(outFile, "w", encoding='utf-8')
        else:
            fout = open(outFile, "a", encoding='utf-8')

        for i in range(len(data)):
            fout.writelines(str(data[i]))
            fout.writelines(', ')
        fout.writelines('\n')
        fout.close()

        #idView_next = int(idView) + 1
        idView_next = int(idTotal) + 2
        idTotal_next = int(idTotal) + 1
        self.text_ctrl_idView.SetValue(str(idView_next))
        self.text_ctrl_idTotal.SetValue(str(idTotal_next))
        #
        self.text_ctrl_title.SetValue('No.'+str(idView_next))
        #

        self.ListShow()
        self.Clear_R()

        # Pandas Check
        #df = pd.read_csv("./db/rcslab.txt")
        #print(df)


    # Make report
    def OnReport(self,event):

        with wx.FileDialog(self, "Save Pdf File", wildcard="Input File (*.pdf)|*.pdf",
                           style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT) as fileDialog:
            if fileDialog.ShowModal() == wx.ID_CANCEL:
                return     # the user changed their mind
            # save the current contents in the file
            pathname = fileDialog.GetPath() # pdf file

            try:
                num = int( self.text_ctrl_idTotal.GetValue() )
                print(num)
                title = "Tow Way Shear"
                #for i in range(0,num):
                obj = report.Report()
                obj.create_pdf(num,pathname,title)
                del obj
            except IOError:
                wx.LogError("Cannot save current data in file '%s'." % pathname)


    # Export Csv Sheet
    ########################################################################
    def OnExport(self,event):
        with wx.FileDialog(self, "Save Csv File", wildcard="Output File (*.csv)|*.csv",
                           style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT) as fileDialog:
            if fileDialog.ShowModal() == wx.ID_CANCEL:
                return     # the user changed their mind
            # save the current contents in the file
            pathname = fileDialog.GetPath()
            try:
                input_path = './db/rcslab.txt'
                with open(input_path, encoding='utf-8') as f:
                    s = f.read()
                with open(pathname, 'w', encoding='utf-8') as file:
                    file.write(s)
            except IOError:
                wx.LogError("Cannot save current data in file '%s'." % pathname)


    # Import Csv Sheet
    ########################################################################
    def OnImport(self,event):
        with wx.FileDialog(self, "Open Input csv file", wildcard="Input files (*.csv)|*.csv",
                           style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST) as fileDialog:

            if fileDialog.ShowModal() == wx.ID_CANCEL:
                return     # the user changed their mind
            # save the current contents in the file
            pathname = fileDialog.GetPath()
            try:
                with open(pathname, encoding='utf-8') as f:
                    s = f.read()

                input_path = './db/rcslab.txt'
                with open(input_path, 'w', encoding='utf-8') as file:
                    file.write(s)

                # Listの読み込み
                line_count = 0
                with open(input_path, encoding='utf-8') as f:
                    for line in f:
                        line_count += 1
                print("Success Import!!!")

                self.text_ctrl_idTotal.SetValue(str(line_count))
                #self.text_ctrl_idView.SetValue(str(1))
                self.ListShow()
                self.list_ctrl_output.Select(0)
                self.OnShow(event)

            except IOError:
                wx.LogError("Cannot import current data in file '%s'." % pathname)



    def OnCal(self, event):  # wxGlade: MyFrame.<event_handler>

        # Read Data
        ########################################################################
        title,subTitle,\
            c1,c2,dp,dt,\
            calType,phai,\
            facdl,facll,vdl,vll,mdl,mll,\
            fc,fy,s\
            = self.input_parameter(1)

        """
        # test
        print(title)
        print(subTitle)
        print(hh1,bb1,tw1,tw1,rr1)
        print(hh2,bb2,tw2,tw2,rr2)
        print(ll  )
        print(bound   )
        print(fixtype )
        print(qv )
        print(lb )
        print(fac )
        print(studfac )
        print(htbsize  )
        print(friction )
        print(n21 )
        print(n22 )
        print(n23 )
        print(xpitch )
        print(ypitch )
        print(htbe   )
        print(tg  )
        print(gassettype  )
        print(stud  )
        print(sigy1 )
        print(sigy2 )
        print(sigyg )
        print(htbm )
        print(conc )
        print(fc )
        print(gamma )
        """

        # Preparation
        d = dp - dt
        vu = facdl * vdl + facll * vll
        mu = facdl * mdl + facll * mll

        # Calculation

        joint = punch.Punch(c1,c2,d,calType)
        b1,b2,b0,d,\
            vu,mu,ac,jc,cab,\
            gamma_f,gamma_v,msc,mv,\
            tau_u,tau_v1,tau_v2,tau_max,tau_min,\
            vc1,vc2,vc3,vc,pvc,\
            vnmax,pvnmax,reqvs,reqas\
            = joint.edgeCal(vu,mu,fc,phai,s,fy)

        # output to gui
        ########################################################################

        # テキスト出力
        self.output(\
                    b1,b2,b0,d,\
                    vu,mu,ac,jc,cab,\
                    gamma_f,gamma_v,msc,mv,\
                    tau_u,tau_v1,tau_v2,tau_max,tau_min,\
                    vc1,vc2,vc3,vc,pvc,\
                    vnmax,pvnmax,reqvs,reqas\
                    )

        # モデル出力
        self.matplotlib_axes.clear()
        self.matplotlib_canvas.draw()

        ax = self.matplotlib_axes
        canv = self.matplotlib_canvas

        joint.model(ax,canv)
        """
        self.OnModel(event)
        """
        # classの終了
        del joint
        event.Skip()

    def input_parameter(self,kata):

        # kata ==  0 そのまま
        # kata ==  1 型を変換してパラメーターを返す。

        title = self.text_ctrl_title.GetValue()
        subTitle = self.text_ctrl_subtitle.GetValue()
        # Column
        c1 = ( self.text_ctrl_c1.GetValue() )
        c2 = ( self.text_ctrl_c2.GetValue() )
        # Drop Panel
        dp = ( self.text_ctrl_dp.GetValue() )
        dt = ( self.text_ctrl_dt.GetValue() )
        # Design Condition
        calType = self.combo_box_CalType.GetValue()
        phai = ( self.text_ctrl_phai.GetValue() )
        facdl = ( self.text_ctrl_facdl.GetValue() )
        facll = ( self.text_ctrl_facll.GetValue() )
        vdl   = ( self.text_ctrl_vdl.GetValue() )
        vll   = ( self.text_ctrl_vll.GetValue() )
        mdl   = ( self.text_ctrl_mdl.GetValue() )
        mll   = ( self.text_ctrl_mll.GetValue() )
        # Material
        fc = ( self.text_ctrl_fc.GetValue() )
        fy = ( self.text_ctrl_fy.GetValue() )
        s  = ( self.text_ctrl_s.GetValue() )

        if kata == 1 :
            # Column
            c1 = float(c1)
            c2 = float(c2)
            # Drop Panel
            dp = float(dp)
            dt = float(dt)
            # Design Condition
            #calType = self.combo_box_CalType.GetValue()
            phai = float(phai )
            facdl = float(facdl )
            facll = float(facll )
            vdl   = float(vdl   )
            vll   = float(vll   )
            mdl   = float(mdl   )
            mll   = float(mll   )
            # Material
            fc = float(fc )
            fy = float(fy )
            s  = float(s  )

            return title,subTitle,\
                c1,c2,dp,dt,\
                calType,phai,\
                facdl,facll,vdl,vll,mdl,mll,\
                fc,fy,s

        elif kata == 0 :

            # Dimension
            b1 = self.text_ctrl_b1.GetValue()
            b2 = self.text_ctrl_b2.GetValue()
            b0 = self.text_ctrl_b0.GetValue()
            d = self.text_ctrl_d.GetValue()
            #
            # Load
            vu = self.text_ctrl_vu.GetValue()
            mu = self.text_ctrl_mu.GetValue()
            # Prop.
            ac = self.text_ctrl_ac.GetValue()
            jc = self.text_ctrl_jc.GetValue()
            cab = self.text_ctrl_cab.GetValue()
            # Evaluation
            gamma_f = self.text_ctrl_gamma_f.GetValue()
            gamma_v = self.text_ctrl_gamma_v.GetValue()
            msc = self.text_ctrl_mubar.GetValue()
            mv = self.text_ctrl_msc.GetValue()
            # Analysis
            tau_u = self.text_ctrl_vug.GetValue()
            tau_v1 = self.text_ctrl_vv1.GetValue()
            tau_v2 = self.text_ctrl_vv2.GetValue()
            tau_max = self.text_ctrl_vmax.GetValue()
            tau_min = self.text_ctrl_vmin.GetValue()
            # Check Concrete Capacity
            vc1 = self.text_ctrl_vc1.GetValue()
            vc2 = self.text_ctrl_vc2.GetValue()
            vc3 = self.text_ctrl_vc3.GetValue()
            vc = self.text_ctrl_vc.GetValue()
            pvc = self.text_ctrl_pvc.GetValue()
            # Check RF.
            vnmax = self.text_ctrl_vnmax.GetValue()
            pvnmax = self.text_ctrl_pvnmax.GetValue()
            reqvs = self.text_ctrl_reqvs.GetValue()
            reqas = self.text_ctrl_reqas.GetValue()
            # Judge
            concreteJudge = self.text_ctrl_concreteJudge.GetValue()
            judge = self.text_ctrl_judge.GetValue()

            return title,subTitle,\
                c1,c2,dp,dt,\
                calType,phai,\
                facdl,facll,vdl,vll,mdl,mll,\
                fc,fy,s,\
                b1,b2,b0,d,\
                vu,mu,\
                ac,jc,cab,\
                gamma_f,gamma_v,msc,mv,\
                tau_u,tau_v1,tau_v2,tau_max,tau_min,\
                vc1,vc2,vc3,vc,pvc,\
                vnmax,pvnmax,reqvs,reqas,\
                concreteJudge,judge

        else:
            print("Error, def input_parameter, kata == ???" )


    def output(self,\
               b1,b2,b0,d,\
               vu,mu,ac,jc,cab,\
               gamma_f,gamma_v,msc,mv,\
               tau_u,tau_v1,tau_v2,tau_max,tau_min,\
               vc1,vc2,vc3,vc,pvc,\
               vnmax,pvnmax,reqvs,reqas\
               ):
        ####################
        # 出力
        # Dimension
        self.text_ctrl_b1.SetValue("{:.0f}".format(b1))
        self.text_ctrl_b2.SetValue("{:.0f}".format(b2))
        self.text_ctrl_b0.SetValue("{:.0f}".format(b0))
        self.text_ctrl_d.SetValue("{:.0f}".format(d))
        #
        # Load
        self.text_ctrl_vu.SetValue("{:.0f}".format(vu))
        self.text_ctrl_mu.SetValue("{:.0f}".format(mu))
        # Prop.
        self.text_ctrl_ac.SetValue("{:.2e}".format(ac))
        self.text_ctrl_jc.SetValue("{:.2e}".format(jc))
        self.text_ctrl_cab.SetValue("{:.0f}".format(cab))
        # Evaluation
        self.text_ctrl_gamma_f.SetValue("{:.2f}".format(gamma_f))
        self.text_ctrl_gamma_v.SetValue("{:.2f}".format(gamma_v))
        self.text_ctrl_mubar.SetValue("{:.0f}".format(msc))
        self.text_ctrl_msc.SetValue("{:.0f}".format(mv))
        # Analysis
        self.text_ctrl_vug.SetValue("{:.2f}".format(tau_u))
        self.text_ctrl_vv1.SetValue("{:.2f}".format(tau_v1))
        self.text_ctrl_vv2.SetValue("{:.2f}".format(tau_v2))
        self.text_ctrl_vmax.SetValue("{:.2f}".format(tau_max))
        self.text_ctrl_vmin.SetValue("{:.2f}".format(tau_min))
        # Check Concrete Capacity
        self.text_ctrl_vc1.SetValue("{:.2f}".format(vc1))
        self.text_ctrl_vc2.SetValue("{:.2f}".format(vc2))
        self.text_ctrl_vc3.SetValue("{:.2f}".format(vc3))
        self.text_ctrl_vc.SetValue("{:.2f}".format(vc))
        self.text_ctrl_pvc.SetValue("{:.2f}".format(pvc))
        # Check RF.
        self.text_ctrl_vnmax.SetValue("{:.2f}".format(vnmax))
        self.text_ctrl_pvnmax.SetValue("{:.2f}".format(pvnmax))
        self.text_ctrl_reqvs.SetValue("{:.2f}".format(reqvs))
        self.text_ctrl_reqas.SetValue("{:.0f}".format(reqas))


        if tau_max < pvc:
            self.text_ctrl_concreteJudge.SetValue("vmax < φvc: Valid")
        else:
            self.text_ctrl_concreteJudge.SetValue("vmax > φvc: Invalid.")

        if pvnmax == 0.0:
            self.text_ctrl_judge.SetValue("------No Need")
        elif tau_max/pvnmax <= 1.0:
            self.text_ctrl_judge.SetValue("Place Shear RF.")
        else:
            self.text_ctrl_judge.SetValue("Recheck Dimension")

    def OnModel(self,event):

        self.matplotlib_axes.clear()
        self.matplotlib_canvas.draw()

        # imput data
        # Column
        c1 = float( self.text_ctrl_c1.GetValue() )
        c2 = float( self.text_ctrl_c2.GetValue() )
        # Drop Panel
        dp = float( self.text_ctrl_dp.GetValue() )
        dt = float( self.text_ctrl_dt.GetValue() )
        # Design Condition
        calType = self.combo_box_CalType.GetValue()

        # Preparation
        d = dp - dt
        joint = punch.Punch(c1,c2,d,calType)

        # Make Graph

        plt = matplotlib.pyplot
        fig = plt.figure()
        ax = self.matplotlib_axes

        column = patches.Rectangle(xy=(0, 0), width=c1, height=c2, \
                                   linewidth="1.5", ec='#000000', color="gray", alpha=0.5 )

        if calType == "Internal":
            b1 = c1 + d
            b2 = c2 + d
            critical = patches.Rectangle(xy=(-d/2, -d/2), width=b1, height=b2, \
                                      ec='#000000', fill=False)
        elif calType == "Edge":
            b1 = c1 + d / 2.0
            b2 = c2 + d
            critical = patches.Rectangle(xy=(0, -d/2), width=b1, height=b2, \
                                      ec='#000000', fill=False)

        elif calType == "Cornner":
            b1 = c1 + d / 2.0
            b2 = c2 + d / 2.0
            critical = patches.Rectangle(xy=(0, -d/2), width=b1, height=b2, \
                                      ec='#000000', fill=False)
        else:
            print("Erro, calType invalid")

        ax.add_patch(column)
        ax.add_patch(critical)

        #plt.axis('scaled')
        ax.axis('scaled')
        ax.set_aspect('equal')
        ax.axis("off")
        self.matplotlib_canvas.draw()

        del joint
        event.Skip()


    def OnDB(self,event):
        MyFrame3(None, wx.ID_ANY, "").Show()
        #MyFrame3.ListShow()
        return True
"""
class MyFrame3(gui_stiff.MyFrame3):

    #self.ListShow()

    def OnCal(self,event):
        print("Hello")
        MyFrame2.text_ctrl_title.SetValue("Hello")

    def ListShow(self):
        #self.list_ctrl_output.DeleteAllItems();
        #idTotal = self.text_ctrl_idView.GetValue()
        outFile = './db/H_Shape.csv'
        index = 0
        with open(outFile, encoding='utf-8') as f:
            for row in csv.reader(f):
                self.list_ctrl_db1.InsertItem(index, index)
                self.list_ctrl_db1.SetItem(index, 0, str(int(index+1)))
                self.list_ctrl_db1.SetItem(index, 1, row[0])
                self.list_ctrl_db1.SetItem(index, 2, row[1])
                index += 1
        f.close()


"""
class MyFrame(gui_punch.MyFrame):

    def OnQuit(self, event):
        self.Close()

    def OnRcslab(self,event):
        MyFrame2(None, wx.ID_ANY, "").Show()
        return True

    def OnTest(self,event):
        MyFrame_test(None, wx.ID_ANY, "").Show()
        return True
"""
class MyFrame_test(gui.MyFrame_test):
    print('h')
"""

# end of class MyFrame

# end of class MyFrame

class MyApp(wx.App):

    def OnInit(self):
        new_dir_path = './db'
        try:
            os.mkdir(new_dir_path)
        except FileExistsError:
            pass
        #self.frame = MyFrame(None, wx.ID_ANY, "")
        self.frame = MyFrame2(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        #MyFrame2(None, wx.ID_ANY, "").
        ##self.frame.HShape()
        return True
# 上のふたつの#をとって、frameをコメントアウトすれば、ホーム画面を立ち上げる。
# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
